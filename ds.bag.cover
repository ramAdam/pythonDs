       from hypothesis.stateful import Bundle, RuleBasedStateMachine, rule
       import hypothesis.strategies as st
       
       
       class _BagIterator:
           def __init__(self, head):
    1:         self.current = head
       
           def __next__(self):
    2:         if not self.current:
                   raise StopIteration
    2:         next = self.current
    2:         self.current = self.current.next
    2:         return next
       
           def __iter__(self):
               return self
       
       
       class _BagListNode:
           def __init__(self, item=None):
    2:         self.item = item
    2:         self.nxt = None
       
           @property
           def next(self):
    3:         return self.nxt
       
           @next.setter
           def next(self, node):
    2:         self.nxt = node
       
       
       class Bag(RuleBasedStateMachine):
       
           def __init__(self):
               self.head = None
               self._size = 0
       
           items = Bundle("items")
       
           @rule(target=items, item=st.binary())
           def add(self, item):
               """prepends a node to the head"""
    2:         size_before = self._size
    2:         if self._size == 0:
    1:             self.head = _BagListNode(item)
    1:             self._size += 1
               else:
    1:             tmp = self.head
    1:             self.head = _BagListNode(item)
    1:             self.head.next = tmp
    1:             self._size += 1
       
    2:         assert self.head.item == item
    2:         assert self._size > size_before
       
           @rule(target=items, item=st.binary())
           def remove(self, item):
               """finds and removes a node from linked list"""
    1:         prev = None
    1:         if self._size == 0:
                   return
    1:         size_before = self._size
    2:         for e in self:
    2:             try:
    2:                 if e.item == item:
    1:                     prev.next = e.next
    1:                     self._size -= 1
    1:                     return
    1:                 prev = e
                   except AttributeError:
                       self.head = self.head.next
                       self._size -= 1
                       return
                       
               assert item not in self and self._size < size_before
       
           def __len__(self):
               assert self._size == 0 and not self.head
               return self._size
       
           def __iter__(self):
    1:         return _BagIterator(self.head)
       
           def __contains__(self, target):
               for e in self:
                   if e.item == target:
                       return True
               return False
       
           def __repr__(self):
               l = []
               l.append('[ ')
               for e in self:
                   l.append(str(e.item))
                   l.append(' ,')
               l.pop()
               l.append(' ]')
               return "".join(l)
